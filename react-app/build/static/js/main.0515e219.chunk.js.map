{"version":3,"sources":["components/Signup.js","components/Login.js","components/Jumbotron.js","components/Loading.js","components/Home.js","components/Verified.js","components/Breadcrumbs.js","components/Game.js","components/Session.js","components/Frames.js","components/NavBar.js","components/Profile.js","components/PostSignup.js","App.js","serviceWorker.js","index.js"],"names":["Signup","state","email","password","isSubmitted","errorMessage","firstName","lastName","confirmPassword","signupSuccessful","handleInputChange","event","target","name","value","setState","validateForm","hasErrors","length","test","errorResponseIsDuplicateEmail","response","a","json","errBody","status","toLowerCase","keyValue","code","handleLoginButtonClick","preventDefault","body","fetch","method","headers","JSON","stringify","then","ok","res","console","log","catch","err","this","to","className","onChange","type","placeholder","onClick","Component","Login","redirect","self","user","props","setGlobalUser","Jumbotron","Loading","Home","topScore","lowestScore","averageScore","playerYouDoTheBestAgainst","playerYouDoTheWorstAgainst","mostCommonOpponent","sessions","alleys","isLoading","tmpAlleys","stats","error","forEach","session","alley","find","_id","alleyId","map","date","games","Date","timePlayed","toLocaleDateString","class","Verified","Breadcrumbs","aria-label","links","link","address","aria-current","currentPage","Session","isNew","opponents","selectedAlley","successMessage","match","params","sessionId","getSession","newValue","actionMeta","action","createNewAlley","newAlley","createdAlley","newAlleys","newSession","createdSession","undefined","saveSession","bind","role","isClearable","options","label","classNamePrefix","id","handleAlleysChange","game","toLocaleTimeString","key","players","playerId","opp","join","totalScore","frames","Array","keys","frameThrowSections","Frames","selected","currentThrow","frameThrows","disabled","displayValue","buttons","handleScoreButtonClicked","button","newSelected","frameThrowsCopy","newButtons","getButtonsForThrow","setFrames","setInitialFrameThrows","frameNumber","i","firstThrow","frame","number","scores","tenthFrame","score","index","prevButtonValue","buttonValue","buttonsCopy","colspan","classes","selectScore","filter","Game","ballsUsed","balls","selectedBalls","selectedPlayers","gameId","getBallsAndOpponents","getGame","tmpBalls","tmpPlayers","newState","player","ballId","ball","flatFrames","tmpFrame","currentNumber","push","newGame","getTotalScoreForFrames","newValues","newOne","nv","__isNew__","createNewBall","newSelectedBalls","createNewOpponent","newSelectedPlayers","newOpponent","createdOpponent","newOpponents","newSelectedOpponents","newBall","createdBall","newBalls","newTime","ballIds","playerIds","createdGame","saveGame","style","height","verticalAlign","handleTimePlayedChange","for","isMulti","handleOpponentsChange","handleBallsUsedChange","NavBar","logout","e","data-toggle","data-target","aria-controls","aria-expanded","href","aria-haspopup","aria-labelledby","Profile","getUserInfo","commonOpponents","readonly","opponent","PostSignup","App","isAuthenticated","isCheckingAuth","path","component","PrivateRoute","rest","render","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.0515e219.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Signup.css';\nimport { Link, Redirect } from 'react-router-dom'\n\nclass Signup extends Component {\n    state = {\n        email: '',\n        password: '',\n        isSubmitted: false,\n        errorMessage: '',\n        firstName: '',\n        lastName: '',\n        confirmPassword: '',\n        signupSuccessful: false\n    }\n\n    handleInputChange = event => {\n        const { name, value } = event.target;\n        this.setState({\n            [name]: value\n        });\n    };\n\n    validateForm = () => {\n        let hasErrors = false;\n        if (this.state.password !== this.state.confirmPassword) {\n            this.setState({\n                errorMessage: 'Passwords must match. Please try again.'\n            })\n            hasErrors = true;\n        }\n        if (this.state.password.length < 8) {\n            this.setState({\n                errorMessage: 'Password must be at least 8 characters in length.'\n            })\n            hasErrors = true;\n        }\n        if (this.state.firstName.length < 3) {\n            this.setState({\n                errorMessage: 'First name must be between 3 and 50 characters.'\n            })\n            hasErrors = true;\n        }\n        if (this.state.lastName.length > 50 || this.state.lastName.length < 3) {\n            this.setState({\n                errorMessage: 'Last name must be between 3 and 50 characters.'\n            })\n            hasErrors = true;\n        }\n        if (!/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(this.state.email)) {\n            this.setState({\n                errorMessage: 'Please enter a valid email address.'\n            })\n            hasErrors = true;\n        }\n\n\n        // if (this.state.email !== mailFormat) {\n        //     this.setState({\n        //         errorMessage: 'Please enter a valid email address.'\n        //     })\n        //     hasErrors = true;\n        // }\n\n        return hasErrors;\n    }\n\n    errorResponseIsDuplicateEmail = async response => {\n        const errBody = await response.json()\n\n        return response.status === 400 &&\n            errBody.name.toLowerCase() === \"mongoerror\" &&\n            errBody.keyValue.email &&\n            errBody.code === 11000\n    }\n\n    handleLoginButtonClick = event => {\n        event.preventDefault()\n        const body = {\n            email: this.state.email,\n            password: this.state.password,\n            firstName: this.state.firstName,\n            lastName: this.state.lastName\n        }\n        if (this.validateForm()) {\n            return\n        }\n        fetch(`/auth/signup`, {\n            method: 'post',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        })\n            .then(response => {\n                if (!response.ok) { throw response }\n                return response.json()  //we only get here if there is no error\n            })\n            .then(res => {\n                console.log('GOT this user', res)\n                this.setState({\n                    signupSuccessful: true\n                })\n            })\n            .catch(async err => {\n                if (await this.errorResponseIsDuplicateEmail(err)) {\n                    this.setState({\n                        errorMessage: 'This user already exists. Please try again.'\n                    })\n                }\n\n            })\n        this.setState({\n            errorMessage: '',\n            email: '',\n            firstName: '',\n            lastName: '',\n            password: '',\n            confirmPassword: ''\n        })\n        // alert('signup successful.')\n    }\n\n    render() {\n        if (this.state.signupSuccessful) {\n            return (\n                <Redirect to={'/postsignup'} />\n            )\n        }\n        return (\n            < div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-6 login-form-1 offset-md-3\">\n                        <h2>Sign Up</h2>\n                        <form>\n                            <div className=\"form-group\">\n                                <input onChange={this.handleInputChange} name=\"firstName\" type=\"text\" className=\"form-control\" placeholder=\"First Name *\" value={this.state.firstName} />\n                            </div>\n                            <div className=\"form-group\">\n                                <input onChange={this.handleInputChange} name=\"lastName\" type=\"text\" className=\"form-control\" placeholder=\"Last Name *\" value={this.state.lastName} />\n                            </div>\n                            <div className=\"form-group\">\n                                <input onChange={this.handleInputChange} name=\"email\" type=\"text\" className=\"form-control\" placeholder=\"Your Email *\" value={this.state.email} />\n                            </div>\n                            <div className=\"form-group\">\n                                <input onChange={this.handleInputChange} type=\"password\" className=\"form-control\" name=\"password\" placeholder=\"Your Password *\" value={this.state.password} />\n                            </div>\n                            <div className=\"form-group\">\n                                <input onChange={this.handleInputChange} type=\"password\" className=\"form-control\" name=\"confirmPassword\" placeholder=\"Retype Password *\" value={this.state.confirmPassword} />\n                            </div>\n                            <p>{this.state.errorMessage}</p>\n                            <div className=\"form-group\">\n                                <input onClick={this.handleLoginButtonClick} type=\"submit\" className=\"btnSubmit\" value=\"Sign Up\" />\n                            </div>\n                            <div className=\"form-group\">\n                                <Link className=\"login-button\" to=\"/login\">\n                                    <input type=\"submit\" className=\"btnSubmit\" value=\"Login Here\" />\n                                </Link>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Signup\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom'\nimport './Login.css';\nimport { Link } from 'react-router-dom'\n\n\nclass Login extends Component {\n    state = {\n        email: '',\n        password: '',\n        isSubmitted: false,\n        errorMessage: '',\n        redirect: null\n    }\n\n    handleInputChange = event => {\n        const { name, value } = event.target;\n        this.setState({\n            [name]: value\n        });\n    };\n\n    handleLoginButtonClick = event => {\n        event.preventDefault()\n        const body = {\n            email: this.state.email,\n            password: this.state.password\n        }\n        const self = this\n        fetch(`/auth/login`, {\n            method: 'post',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        })\n            .then(response => {\n                if (!response.ok) { throw response }\n                return response.json()  //we only get here if there is no error\n            })\n            .then(function (user) {\n                self.props.setGlobalUser(user)\n                self.setState({ redirect: '/home' })\n            })\n            .catch(err => {\n                if (err.status === 401) {\n                    this.setState({\n                        errorMessage: 'Login failed. Please try again.'\n                    })\n                }\n                console.log('sorry, got an error', err)\n            })\n    }\n\n    render() {\n        if (this.state.redirect) {\n            return <Redirect to={this.state.redirect} />\n        }\n        return (\n            < div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-6 login-form-1 offset-md-3\">\n                        <h2>Log In</h2>\n                        <form>\n                            <div className=\"form-group\">\n                                <input onChange={this.handleInputChange} name=\"email\" type=\"text\" className=\"form-control\" placeholder=\"Your Email *\" value={this.state.email} />\n                            </div>\n                            <div className=\"form-group\">\n                                <input onChange={this.handleInputChange} type=\"password\" className=\"form-control\" name=\"password\" placeholder=\"Your Password *\" value={this.state.password} />\n                            </div>\n                            <p>{this.state.errorMessage}</p>\n                            <div className=\"form-group\">\n                                <input onClick={this.handleLoginButtonClick} type=\"submit\" className=\"btnSubmit\" value=\"Login\" />\n                            </div>\n                            <div className=\"form-group\">\n                                <Link className=\"sign-up-button\" to=\"/signup\">\n                                    <input type=\"submit\" className=\"btnSubmit\" value=\"Sign Up Here\" />\n                                </Link>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Login","import React from 'react';\nimport './Jumbotron.css';\n\nfunction Jumbotron() {\n    return (\n        <div className=\"jumbotron\">\n            <h1 className=\"display-4\">Bowled Over</h1>\n        </div>\n    );\n}\n\nexport default Jumbotron;","import React from 'react'\nimport './Loading.css'\n\nfunction Loading() {\n    return (\n        <div className=\"loading\">Loading&#8230;</div>\n    )\n}\n\nexport default Loading","import React, { Component } from 'react';\nimport Jumbotron from './Jumbotron'\nimport { Link } from 'react-router-dom'\nimport Loading from './Loading'\n\nclass Home extends Component {\n    state = {\n        topScore: 0,\n        lowestScore: 0,\n        averageScore: 0,\n        playerYouDoTheBestAgainst: \"N/A\",\n        playerYouDoTheWorstAgainst: \"N/A\",\n        mostCommonOpponent: \"N/A\",\n        sessions: [],\n        alleys: [],\n        isLoading: true\n    }\n\n    componentWillMount() {\n        fetch('/api/user/stats')\n            .then(res => {\n                if (!res.ok) throw res\n                return res.json()\n            })\n            .then(stats => {\n                console.log('got stats', stats)\n                this.setState({\n                    ...stats\n                })\n            })\n            .catch(err => console.error(err))\n        let tmpAlleys;\n        fetch('/api/user/alleys')\n            .then(res => {\n                if (!res.ok) throw res\n                return res.json()\n            })\n            .then(alleys => {\n                tmpAlleys = alleys\n                return fetch('/api/session')\n            })\n            .then(res => {\n                if (!res.ok) throw res\n                return res.json()\n            })\n            .then(sessions => {\n                console.log('got sessions', sessions)\n                sessions.forEach(session => {\n                    session.alley = tmpAlleys.find(alley => alley._id === session.alleyId)\n                })\n                this.setState({\n                    sessions,\n                    isLoading: false\n                })\n            })\n            .catch(err => console.error(err))\n    }\n\n    render() {\n        if (this.state.isLoading) {\n            return <Loading />\n        }\n        return (\n            <div className='container'>\n                <Jumbotron />\n                <h3>Stats</h3>\n                <table className=\"table\">\n                    <tbody>\n                        <tr>\n                            <td>High Score</td>\n                            <td>{this.state.topScore}</td>\n                        </tr>\n                        <tr>\n                            <td>Average Score</td>\n                            <td>{this.state.averageScore}</td>\n                        </tr>\n                        <tr>\n                            <td>Low Score</td>\n                            <td>{this.state.lowestScore}</td>\n                        </tr>\n                        <tr>\n                            <td>Most Common Opponent</td>\n                            <td>{this.state.mostCommonOpponent}</td>\n                        </tr>\n                        <tr>\n                            <td>Opponent You Play Best Against</td>\n                            <td>{this.state.playerYouDoTheBestAgainst}</td>\n                        </tr>\n                        <tr>\n                            <td>Opponent You Play Worst Against</td>\n                            <td>{this.state.playerYouDoTheWorstAgainst}</td>\n                        </tr>\n                    </tbody>\n                </table>\n\n                <h3>Sessions</h3>\n                <table className=\"table\">\n                    <tbody>\n                        {this.state.sessions.map(session => {\n                            if (!session.alley) return null\n                            const date = (session.games.length > 0) ?\n                                new Date(session.games[0].timePlayed).toLocaleDateString() :\n                                'Date not available'\n                            return (\n                                <tr>\n                                    <td>{session.alley.name}</td>\n                                    <td>{date}</td>\n                                    <td>{session.games.length} Games played</td>\n                                    <td>\n                                        <Link className=\"new-session\" to={`/session/${session._id}`}>\n                                            <button type=\"button\" class=\"btn btn-light\">Edit</button>\n                                        </Link>\n                                    </td>\n                                </tr>\n                            )\n                        })}\n                    </tbody>\n                </table>\n\n                <hr></hr>\n                <Link className=\"new-session\" to=\"/session/new\">\n                    <button type=\"button\" className=\"btn btn-outline-dark\">Start New Session</button>\n                </Link>\n\n            </div>\n        );\n    }\n}\n\nexport default Home;\n// export default Home","import React from 'react';\nimport Jumbotron from './Jumbotron'\nimport { Link } from 'react-router-dom'\n\nconst Verified = () => {\n    return (\n        <div className='container'>\n            <Jumbotron/>\n\n            <div className='col-md-4 offset-md-4 verified'>\n                Great! Thanks for verifying your email!\n                <br></br>\n                <Link className=\"\" to=\"/login\">\n                <button type=\"button\" className=\"btn btn-outline-dark\">Take Me To The Login Page</button>\n                </Link>\n            </div>\n        </div>\n    )\n}\n\nexport default Verified","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nfunction Breadcrumbs(props) {\n    return (\n        <nav aria-label=\"breadcrumb\" className=\"breadcrumbNav\">\n            <ol className=\"breadcrumb\">\n                {props.links.map(link => (\n                    <li className=\"breadcrumb-item\">\n                        <Link to={link.address}>{link.name}</Link>\n                    </li>\n                ))}\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">{props.currentPage}</li>\n            </ol>\n        </nav>\n    )\n}\nexport default Breadcrumbs","import React, { Component } from 'react';\nimport CreatableSelect from 'react-select/creatable'\nimport Frames from './Frames'\nimport Breadcrumbs from './Breadcrumbs'\nimport Loading from './Loading'\nimport DateTimePicker from 'react-datetime-picker';\nimport './Game.css'\n\nlet self\n\nclass Game extends Component {\n    state = {\n        game: {\n            frames: [],\n            ballsUsed: [],\n            players: []\n        },\n        opponents: [],\n        balls: [],\n        isLoading: true,\n        successMessage: '',\n        errorMessage: '',\n        selectedBalls: [],\n        selectedPlayers: [],\n        timePlayed: new Date(),\n        totalScore: 0\n    }\n\n    constructor(props) {\n        super(props)\n        self = this\n    }\n\n    componentDidMount() {\n        console.log(this.props.match.params.sessionId)\n        if (this.props.match.params.gameId === 'new') {\n            this.setState({ isNew: true })\n            this.getBallsAndOpponents()\n        } else {\n            this.getGame(this.props.match.params.gameId)\n        }\n    }\n\n    getBallsAndOpponents() {\n        fetch('/api/user/balls')\n            .then(res => {\n                if (!res.ok) throw res\n                return res.json()\n            })\n            .then(balls => {\n                console.log('got the balls', balls)\n                this.setState({ balls })\n                return fetch('/api/user/common-opponents')\n            })\n            .then(res => {\n                if (!res.ok) throw res\n                return res.json()\n            })\n            .then(opponents => {\n                console.log('got the opponents', opponents)\n                this.setState({ opponents, isLoading: false })\n            })\n            .catch(err => console.error(err))\n    }\n\n    getTotalScoreForFrames(frames) {\n        fetch('/api/calc/totalscore', {\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            method: 'post',\n            body: JSON.stringify({\n                frames\n            })\n        })\n        .then(res => {\n            if (!res.ok) throw res\n            return res.json()\n        })\n        .then(response => {\n            this.setState({\n                totalScore: response.totalScore\n            })\n        })\n        .catch(err => console.error(err))\n    }\n\n    getGame(gameId) {\n        let tmpBalls;\n        let tmpPlayers;\n        fetch('/api/user/balls')\n            .then(res => {\n                if (!res.ok) throw res\n                return res.json()\n            })\n            .then(balls => {\n                console.log('got the balls', balls)\n                this.setState({ balls })\n                tmpBalls = balls\n                return fetch('/api/user/common-opponents')\n            })\n            .then(res => {\n                if (!res.ok) throw res\n                return res.json()\n            })\n            .then(opponents => {\n                console.log('got the opponents', opponents)\n                this.setState({ opponents })\n                tmpPlayers = opponents\n                return fetch(`/api/session/${this.props.match.params.sessionId}/game/${gameId}`)\n            })\n            .then(res => {\n                if (!res.ok) throw res\n                return res.json()\n            })\n            .then(game => {\n                console.log('got game', game)\n                const newState = {\n                    game,\n                    selectedPlayers: game.players.map(playerId => tmpPlayers.find(player => playerId === player._id)),\n                    selectedBalls: game.ballsUsed.map(ballId => tmpBalls.find(ball => ballId === ball._id)),\n                    timePlayed: new Date(game.timePlayed),\n                    isLoading: false,\n                    totalScore: game.totalScore\n                }\n                console.log('setting new state', newState)\n                this.setState(newState)\n            })\n            .catch(err => console.error(err))\n\n    }\n\n    setFrames(flatFrames) {\n        console.log('got the frames back!', flatFrames)\n        let frames = []\n        let tmpFrame = {}\n        let currentNumber = 1\n        for (let i = 0; i < flatFrames.length; i++) {\n            if (i < 18) { // If it's not the 10th frame\n                if (i % 2 === 0) { // If it's the beginning of a new frame\n                    tmpFrame = {\n                        number: currentNumber,\n                        scores: [flatFrames[i].displayValue]\n                    }\n                } else {\n                    tmpFrame.scores.push(flatFrames[i].displayValue) // push second throw on to tmp scores\n                    tmpFrame.scores = tmpFrame.scores.filter(score => score !== '' && score !== null && score !== undefined) // get rid of any empty scores (off a strike)\n                    frames.push(tmpFrame) //commit the frame\n                    currentNumber++\n                }\n            }\n        }\n\n        frames.push({\n            number: 10,\n            scores: [\n                flatFrames[18].displayValue,\n                flatFrames[19].displayValue,\n                flatFrames[20].displayValue\n            ]\n                .filter(score => score !== '')\n        })\n\n        frames = frames.filter(frame => frame.scores.length > 0)\n        console.log('new frames', frames)\n        const newGame = {\n            ...self.state.game,\n            frames\n        }\n        self.getTotalScoreForFrames(frames)\n        self.setState({ game: newGame })\n    }\n\n    handleBallsUsedChange(newValues, actionMeta) {\n        if (actionMeta.action === 'create-option') {\n            const newOne = newValues.find(nv => nv.__isNew__ === true)\n            this.createNewBall(newOne.value)\n            console.log('creating new ball', newValues)\n        } else {\n            if (newValues) {\n                console.log('this.state.balls', this.state.balls)\n                let newSelectedBalls = []\n                for (const newValue of newValues) {\n                    newSelectedBalls.push(this.state.balls.find(ball => ball._id === newValue.value))\n                }\n                console.log('new selected balls', newSelectedBalls)\n                this.setState({ selectedBalls: newSelectedBalls })\n            } else {\n                this.setState({ selectedBalls: [] })\n            }\n        }\n    }\n\n    handleOpponentsChange(newValues, actionMeta) {\n        if (actionMeta.action === 'create-option') {\n            const newOne = newValues.find(nv => nv.__isNew__ === true)\n            this.createNewOpponent(newOne.value)\n            console.log('creating new alley', newValues)\n        } else {\n            if (newValues) {\n                let newSelectedPlayers = []\n                for (const newValue of newValues) {\n                    newSelectedPlayers.push(this.state.opponents.find(opp => opp._id === newValue.value))\n                }\n                console.log('new selected players', newSelectedPlayers)\n                this.setState({ selectedPlayers: newSelectedPlayers })\n            } else {\n                this.setState({ selectedPlayers: [] })\n            }\n        }\n    }\n\n    createNewOpponent(name) {\n        const newOpponent = {\n            name\n        }\n        fetch('/api/user/common-opponents', {\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            method: 'post',\n            body: JSON.stringify(newOpponent)\n        })\n            .then(res => {\n                if (!res.ok) throw res\n                return res.json()\n            })\n            .then(createdOpponent => {\n                console.log('created opp', createdOpponent)\n                const newOpponents = [...this.state.opponents, createdOpponent]\n                const newSelectedOpponents = [...this.state.selectedPlayers, createdOpponent]\n                this.setState({\n                    opponents: newOpponents,\n                    selectedPlayers: newSelectedOpponents\n                })\n            })\n            .catch(err => {\n                this.setState({ errorMessage: 'Sorry, something went wrong' })\n                console.error(err)\n            })\n    }\n\n    createNewBall(name) {\n        const newBall = {\n            name\n        }\n        fetch('/api/user/balls', {\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            method: 'post',\n            body: JSON.stringify(newBall)\n        })\n            .then(res => {\n                if (!res.ok) throw res\n                return res.json()\n            })\n            .then(createdBall => {\n                console.log('created ball', createdBall, this.state.selectedBalls)\n                const newBalls = [...this.state.balls, createdBall]\n                const newSelectedBalls = [...this.state.selectedBalls, createdBall]\n                console.log('new selected balls', newSelectedBalls)\n                this.setState({\n                    balls: newBalls,\n                    selectedBalls: newSelectedBalls\n                })\n            })\n            .catch(err => {\n                this.setState({ errorMessage: 'Sorry, something went wrong' })\n                console.error(err)\n            })\n    }\n\n    handleTimePlayedChange(newTime) {\n        console.log('new time changed', newTime)\n        this.setState({\n            timePlayed: newTime\n        })\n    }\n\n    saveGame() {\n        this.setState({\n            successMessage: '',\n            errorMessage: ''\n        })\n        if (this.state.isNew) {\n            const ballIds = this.state.selectedBalls.map(ball => ball._id)\n            const playerIds = this.state.selectedPlayers.map(player => player._id)\n            const newGame = {\n                ...this.state.game,\n                timePlayed: this.state.timePlayed,\n                ballsUsed: ballIds,\n                players: playerIds\n            }\n            console.log('posting new game', newGame)\n            fetch(`/api/session/${this.props.match.params.sessionId}/game`, {\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                method: 'post',\n                body: JSON.stringify(newGame)\n            })\n                .then(res => {\n                    if (!res.ok) throw res\n                    return res.json()\n                })\n                .then(createdGame => {\n                    console.log('created game', createdGame)\n                    this.setState({\n                        isNew: false,\n                        successMessage: 'Game created successfully',\n                        game: createdGame\n                    })\n                })\n                .catch(err => {\n                    this.setState({ errorMessage: 'Sorry, something went wrong' })\n                    console.error(err)\n                })\n        }\n        else if (this.state.game) {\n            const ballIds = this.state.selectedBalls.map(ball => ball._id)\n            const playerIds = this.state.selectedPlayers.map(player => player._id)\n            const newGame = {\n                ...this.state.game,\n                timePlayed: this.state.timePlayed,\n                ballsUsed: ballIds,\n                players: playerIds\n            }\n            console.log('updating game', newGame)\n            fetch(`/api/session/${this.props.match.params.sessionId}/game/${this.state.game._id}`, {\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                method: 'put',\n                body: JSON.stringify(newGame)\n            })\n                .then(res => {\n                    if (!res.ok) throw res\n                    return res.json()\n                })\n                .then(createdGame => {\n                    this.getGame(createdGame._id)\n                    this.setState({ successMessage: 'Game saved' })\n                })\n                .catch(err => console.error(err))\n        }\n    }\n\n    render() {\n        if (this.state.isLoading) {\n            return <Loading />\n        }\n        return (\n            <div className=\"container\" >\n                <Breadcrumbs\n                    links={[\n                        { name: 'Home', address: '/' },\n                        { name: 'Session', address: `/session/${this.props.match.params.sessionId}` }\n                    ]}\n                    currentPage=\"Game\"\n                />\n                <hr></hr>\n                <div className=\"row\">\n                    <div className=\"col-sm-10\">\n                        <div>\n                            <h4>Game</h4>\n\n                            <p>Setup the game how it was played</p>\n                        </div>\n                    </div>\n                    <div className=\"col-sm-2 float-sm-right\">\n                        <button type=\"button\" onClick={this.saveGame.bind(this)} className=\"btn btn-outline-dark btn-lg float-right\">Save</button>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-sm-12\">\n                        {this.state.successMessage ? (<div className=\"alert alert-success\" role=\"alert\">\n                            {this.state.successMessage}\n                        </div>) : null}\n                        {this.state.errorMessage ? (<div className=\"alert alert-success\" role=\"alert\">\n                            {this.state.errorMessage}\n                        </div>) : null}\n                    </div>\n                </div>\n                <hr />\n                <div className=\"row\">\n                    <div style={{ height: \"100%\", verticalAlign: 'center' }} className=\"col-md-2\">\n                        <label>Time Played</label>\n                    </div>\n                    <div className=\"col-md-10\">\n                        <DateTimePicker\n                            className=\"datetime\"\n                            onChange={this.handleTimePlayedChange.bind(this)}\n                            value={this.state.timePlayed}\n                        />\n                    </div>\n                </div>\n                <hr />\n                <div className=\"row\">\n\n                    <div className=\"col-md-2\">\n                        <label for=\"opponents\">Opponents</label>\n                    </div>\n                    <div className=\"col-md-10\">\n\n                        <CreatableSelect\n                            isMulti\n                            name=\"colors\"\n                            options={this.state.opponents.map(opp => ({ label: opp.name, value: opp._id }))}\n                            className=\"basic-multi-select\"\n                            classNamePrefix=\"select\"\n                            id=\"opponents\"\n                            onChange={this.handleOpponentsChange.bind(this)}\n                            value={this.state.selectedPlayers.map(player => ({ label: player.name, value: player._id }))}\n\n                        />\n                    </div>\n                </div>\n                <hr></hr>\n                <div className=\"row\">\n                    <div className=\"col-md-2\">\n                        <label for=\"balls\">Balls</label>\n                    </div>\n                    <div className=\"col-md-10\">\n                        <CreatableSelect\n                            isMulti\n                            name=\"colors\"\n                            options={this.state.balls.map(ball => ({ label: ball.name, value: ball._id }))}\n                            className=\"basic-multi-select\"\n                            classNamePrefix=\"select\"\n                            id=\"balls\"\n                            onChange={this.handleBallsUsedChange.bind(this)}\n                            value={this.state.selectedBalls.map(ball => ({ label: ball.name, value: ball._id }))}\n\n                        />\n                    </div>\n                </div>\n                <hr></hr>\n                <div className=\"row\">\n                    <div className=\"col text-center\">\n                        <h3>Total Score: {this.state.totalScore}</h3>\n                    </div>\n                </div>\n                <Frames setFrames={this.setFrames} frames={this.state.game.frames}/>\n            </div>\n        )\n    }\n}\n\nexport default Game;\n","import React, { Component } from 'react';\nimport Jumbotron from './Jumbotron'\nimport { Link } from 'react-router-dom'\nimport CreatableSelect from 'react-select/creatable'\nimport Loading from './Loading'\nimport Breadcrumbs from './Breadcrumbs'\nimport './Session.css'\n\nconst alleyChoices = [\n    { value: 'Brookfield Lanes', label: 'Brookfield Lanes' },\n    { value: \"Lori's Lanes\", label: \"Lori's Lanes\" }\n]\n\n\nclass Session extends Component {\n    state = {\n        isNew: false,\n        session: {\n            alley: {},\n            games: []\n        },\n        alleys: [],\n        opponents: [],\n        selectedAlley: {},\n        isLoading: true,\n        successMessage: '',\n        errorMessage: ''\n    }\n\n    componentDidMount() {\n        console.log(this.props.match.params.sessionId)\n        if (this.props.match.params.sessionId === 'new') {\n            this.setState({ isNew: true })\n            fetch('/api/user/alleys')\n                .then(res => {\n                    if (!res.ok) throw res\n                    return res.json()\n                })\n                .then(alleys => {\n                    console.log('got the alleys', alleys)\n                    this.setState({ alleys, isLoading: false })\n                })\n                .catch(err => console.error(err))\n        } else {\n            this.getSession(this.props.match.params.sessionId)\n        }\n    }\n\n    getSession(sessionId) {\n        let tmpAlleys;\n        fetch('/api/user/alleys')\n            .then(res => {\n                if (!res.ok) throw res\n                return res.json()\n            })\n            .then(alleys => {\n                tmpAlleys = alleys\n                console.log('got the alleys', alleys)\n                this.setState({ alleys })\n                return fetch('/api/user/common-opponents')\n            })\n            .then(res => {\n                if (!res.ok) throw res\n                return res.json()\n            })\n            .then(opponents => {\n                this.setState({ opponents })\n                return fetch(`/api/session/${sessionId}`)\n            })\n            .then(res => {\n                if (!res.ok) throw res\n                return res.json()\n            })\n            .then(session => {\n                session.alley = tmpAlleys.find(alley => alley._id === session.alleyId)\n                console.log('got session', session)\n\n                this.setState({\n                    session,\n                    selectedAlley: session.alley,\n                    isLoading: false\n                })\n            })\n            .catch(err => console.error(err))\n    }\n\n\n\n    handleAlleysChange(newValue, actionMeta) {\n        if (actionMeta.action === 'create-option') {\n            this.createNewAlley(newValue.value)\n            console.log('creating new alley', newValue)\n        } else {\n            if (newValue) {\n                this.setState({ selectedAlley: this.state.alleys.find(alley => alley._id === newValue.value) })\n            } else {\n                this.setState({ selectedAlley: {} })\n            }\n        }\n    }\n\n    createNewAlley(name) {\n        const newAlley = {\n            name\n        }\n        fetch('/api/user/alleys', {\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            method: 'post',\n            body: JSON.stringify(newAlley)\n        })\n            .then(res => {\n                if (!res.ok) throw res\n                return res.json()\n            })\n            .then(createdAlley => {\n                console.log('created alley', createdAlley)\n                const newAlleys = [...this.state.alleys, createdAlley]\n                this.setState({\n                    alleys: newAlleys,\n                    selectedAlley: createdAlley\n                })\n            })\n            .catch(err => {\n                this.setState({ errorMessage: 'Sorry, something went wrong' })\n                console.error(err)\n            })\n    }\n\n    saveSession() {\n        this.setState({\n            successMessage: '',\n            errorMessage: ''\n        })\n        if (this.state.isNew && this.state.selectedAlley) {\n            const alleyId = this.state.selectedAlley._id\n            const newSession = {\n                alleyId\n            }\n            console.log('posting new session', newSession)\n            fetch('/api/session', {\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                method: 'post',\n                body: JSON.stringify(newSession)\n            })\n                .then(res => {\n                    if (!res.ok) throw res\n                    return res.json()\n                })\n                .then(createdSession => {\n                    console.log('created session', createdSession)\n                    this.setState({\n                        isNew: false,\n                        successMessage: 'Session created successfully',\n                        session: createdSession\n                    })\n                })\n                .catch(err => {\n                    this.setState({ errorMessage: 'Sorry, something went wrong' })\n                    console.error(err)\n                })\n        }\n        else if (this.state.session && this.state.selectedAlley) {\n            const alleyId = this.state.selectedAlley._id\n            const newSession = {\n                ...this.state.session,\n                alleyId,\n                alley: undefined // get rid of this\n            }\n            console.log('updating session', newSession)\n            fetch(`/api/session/${this.state.session._id}`, {\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                method: 'put',\n                body: JSON.stringify(newSession)\n            })\n                .then(res => {\n                    if (!res.ok) throw res\n                    return res.json()\n                })\n                .then(createdSession => {\n                    this.getSession(createdSession._id)\n                    this.setState({ successMessage: 'Session saved' })\n                })\n                .catch(err => console.error(err))\n        }\n    }\n\n    render() {\n        if (this.state.isLoading) {\n            return <Loading />\n        }\n        return (\n            <div className=\"container\">\n                <Breadcrumbs\n                    links={[\n                        { name: 'Home', address: '/' },\n                    ]}\n                    currentPage=\"Session\"\n                />\n                <hr></hr>\n                <div className=\"row\">\n                    <div className=\"col-sm-8 offset-md-1\">\n                        <div>\n                            <h4>Pick an Alley</h4>\n                            <p>Select an alley from the drop down below, or type to add a new one</p>\n                        </div>\n                    </div>\n                    <div className=\"col-sm-2 float-sm-right\">\n                        <button type=\"button\" onClick={this.saveSession.bind(this)} className=\"btn btn-outline-dark btn-lg float-right\">Save</button>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-sm-10 offset-md-1\">\n                        {this.state.successMessage ? (<div className=\"alert alert-success\" role=\"alert\">\n                            {this.state.successMessage}\n                        </div>) : null}\n                        {this.state.errorMessage ? (<div className=\"alert alert-success\" role=\"alert\">\n                            {this.state.errorMessage}\n                        </div>) : null}\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className='col-md-10 offset-md-1'>\n                        <CreatableSelect\n                            isClearable\n                            name=\"colors\"\n                            options={this.state.alleys.map(alley => ({ label: alley.name, value: alley._id }))}\n                            classNamePrefix=\"select\"\n                            id=\"alleys\"\n                            onChange={this.handleAlleysChange.bind(this)}\n                            value={{ label: this.state.selectedAlley.name, value: this.state.selectedAlley._id }}\n                        />\n                    </div>\n                </div>\n                <hr />\n                {this.state.isNew ? null : (\n                    <div>\n                        <div className=\"row\">\n                            <div className='col-md-10 offset-md-1'>\n                                <h4>Games</h4>\n                                <table className=\"table\">\n                                    <tbody>\n                                        {this.state.session.games.map(game => {\n                                            const date = new Date(game.timePlayed).toLocaleTimeString()\n                                            return (\n                                                <tr key={`game-${game._id}`}>\n                                                    <td>{date}</td>\n                                                    <td>vs. {game.players.map(playerId => this.state.opponents.find(opp => opp._id === playerId).name).join(', ')}</td>\n                                                    <td>Score: {game.totalScore}</td>\n                                                    <td>\n                                                        <Link className=\"new-session\" to={`/session/${this.state.session._id}/game/${game._id}`}>\n                                                            <button type=\"button\" className=\"btn btn-light\">Edit</button>\n                                                        </Link>\n                                                    </td>\n                                                </tr>\n                                            )\n                                        })}\n                                    </tbody>\n                                </table>\n                            </div>\n                        </div>\n                        <div className=\"row\">\n                            <div className='col-md-10 offset-md-1'>\n                                <Link className=\"new-session\" to={`/session/${this.state.session._id}/game/new`}>\n                                    <button type=\"button\" className=\"btn btn-outline-dark\">Start New Game</button>\n                                </Link>\n                            </div>\n                        </div>\n                        <hr></hr>\n                    </div>\n                )}\n            </div>\n        )\n    }\n}\n\nexport default Session;","import React, { Component } from 'react'\nimport './Frames.css'\n\nconst frames = [...Array(10).keys()].map(key => key + 1) // 1 - 10\nconst frameThrowSections = [...Array(21).keys()] // 0 - 20\n\nclass Frames extends Component {\n    state = {\n        selected: 0,\n        currentThrow: 1,\n        frameThrows: [...Array(21).keys()].map(() => ({\n            disabled: true,\n            displayValue: '',\n            value: ''\n        })),\n        buttons: [...Array(11).keys()].map(key => ({\n            disabled: false,\n            value: key,\n            displayValue: (key === 10) ? 'X' : key\n        }))\n    }\n\n    componentDidMount() {\n        this.setInitialFrameThrows(this.props.frames)\n    }\n\n    setInitialFrameThrows(frames) {\n        const frameThrows = [...this.state.frameThrows]\n        let frameNumber = 0\n        for (let i = 0; i < frameThrows.length; i++) {\n            if (i < 18) { // If it's not the 10th frame\n                let firstThrow = false\n                if (i % 2 === 0) { //start of a new frame\n                    frameNumber++\n                    firstThrow = true\n                }\n                const frame = frames.find(frame => frame.number === frameNumber)\n                if (frame) {\n                    if (firstThrow) {\n                        frameThrows[i].value = (frame.scores[0] === 'X') ? 10 : frame.scores[0]\n                        frameThrows[i].displayValue = frame.scores[0]\n                        frameThrows[i].disabled = (frame.scores[0] !== undefined) ? false : true\n                    } else {\n                        frameThrows[i].value = (frame.scores[0] === '/') ? (10 - frameThrows[i - 1].value) : frame.scores[1]\n                        frameThrows[i].displayValue = frame.scores[1]\n                        frameThrows[i].disabled = (frame.scores[1] !== undefined) ? false : true\n                    }\n                }\n            }\n        }\n        const tenthFrame = frames.find(frame => frame.number === 10)\n        if (tenthFrame) {\n            let i = 18\n            for (const score of tenthFrame.scores) {\n                frameThrows[i].value = (score === '/') ? (10 - frameThrows[i - 1].value) : score\n                frameThrows[i].displayValue = score\n                frameThrows[i].disabled = (score !== undefined) ? false : true\n                i++\n            }\n        }\n        this.setState({ frameThrows })\n    }\n\n    selectScore(index) {\n        console.log('clicked', index)\n        if (!this.state.frameThrows[index].disabled) {\n            const prevButtonValue = (this.state.frameThrows[index - 1]) ? this.state.frameThrows[index - 1].value : null\n            let newButtons = this.getButtonsForThrow(prevButtonValue, index)\n            this.setState({ selected: index, buttons: newButtons })\n        }\n    }\n\n    handleScoreButtonClicked = (button) => {\n        console.log('you got ', button)\n        let newSelected = this.state.selected\n        // make a copy\n        const frameThrowsCopy = [...this.state.frameThrows]\n        // Set the score for the button that clicked and the selected frame\n        frameThrowsCopy[this.state.selected] = {\n            disabled: false,\n            displayValue: button.displayValue,\n            value: button.value\n        }\n        // Make the next frame enabled in case you need to go back before complete\n        if (frameThrowsCopy[this.state.selected + 1]) {\n            frameThrowsCopy[this.state.selected + 1].disabled = false\n        }\n        // Increment the selected frame by 1 so it moves over after the score is input\n        newSelected++\n        // Handle if it's a strike (skip the next throw in frame)\n        if (button.displayValue === 'X') {\n            // Not the 10th frame\n            if (this.state.selected < 18) {\n                frameThrowsCopy[this.state.selected + 1] = {\n                    disabled: true,\n                    value: '',\n                    displayValue: ''\n                }\n                newSelected++;\n            }\n        }\n        if (this.state.selected % 2 === 0 && this.state.frameThrows[this.state.selected + 1]) {\n            this.state.frameThrows[this.state.selected + 1].value = ''\n            this.state.frameThrows[this.state.selected + 1].displayValue = ''\n            // If we're in the middle of entering, and the user goes back to the previous frames first throw, \n            // and changes it, that wipes out the second throw, so we want to disable the first throw of the next frame until\n            // they enter the value for the second throw of the previous frame\n            if (this.state.frameThrows[this.state.selected + 2] && this.state.frameThrows[this.state.selected + 2].value === '') {\n                frameThrowsCopy[this.state.selected + 2].disabled = true\n            }\n        }\n        let newButtons = this.getButtonsForThrow(button.value, newSelected)\n\n        this.setState({ frameThrows: frameThrowsCopy, selected: newSelected, buttons: newButtons })\n        // Update the game component with updated throws\n        this.props.setFrames(frameThrowsCopy)\n    }\n\n    getButtonsForThrow(buttonValue, selected) {\n\n        console.log('button value', buttonValue, 'selected', selected)\n        const buttonsCopy = [...Array(11).keys()].map(key => ({\n            disabled: false,\n            value: key,\n            displayValue: (key === 10) ? 'X' : key\n        }))\n\n        // Tenth frame\n        if (this.state.selected > 17) {\n\n        }\n        // It's a strike, so return all possible values for the next throw\n        if (selected % 2 === 0) {\n            console.log('it should reset')\n            return buttonsCopy\n        }\n        else if (buttonValue === 0) {\n            buttonsCopy[10].displayValue = '/'\n        }\n        else {\n            buttonsCopy.forEach((button, i) => {\n                if (i === (10 - buttonValue)) {\n                    button.displayValue = '/'\n                }\n                if (i > (10 - buttonValue)) {\n                    button.disabled = true\n                }\n            })\n        }\n        return buttonsCopy\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"table-responsive\">\n                        <table className=\"table table-bordered table-hover\">\n                            <tr>\n                                {frames.map(frame => {\n                                    const colspan = (frame === 10) ? '3' : '2'\n                                    return (<th colspan={colspan}>Frame {frame}</th>)\n                                })}\n                            </tr>\n                            <tr className=\"throwsRow\">\n                                {frameThrowSections.map((frame, i) => {\n                                    let classes = this.state.selected === i ?\n                                        'throw selected' :\n                                        'throw';\n                                    if (this.state.frameThrows[i].disabled)\n                                        classes += ' disabled'\n                                    return (<td onClick={() => this.selectScore(i)} className={classes}>{this.state.frameThrows[i].displayValue}</td>)\n                                })}\n                            </tr>\n\n                        </table>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col btn-col\">\n                        {this.state.buttons\n                            .filter(button => !button.disabled)\n                            .map(button => (\n                                <button\n                                    type=\"button\"\n                                    className=\"btn btn-lg btn-outline-secondary\"\n                                    value={button.displayValue}\n                                    onClick={() => this.handleScoreButtonClicked(button)}\n                                >\n                                    {button.displayValue}\n                                </button>\n                            ))}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Frames","import React, { Component } from 'react'\nimport { Redirect, Link } from 'react-router-dom'\nimport './NavBar.css'\n\nclass NavBar extends Component {\n    state = {\n        redirect: null\n    }\n    logout = (e) => {\n        const self = this\n        e.preventDefault()\n        fetch('/auth/logout')\n            .then(res => {\n                if (!res.ok) throw res\n                self.setState({ redirect: '/login' })\n            })\n            .catch(err => {\n                console.error(err)\n            })\n    }\n    render() {\n        if (this.state.redirect) {\n            return <Redirect to={this.state.redirect} />\n        }\n        return (\n            <nav className=\"navbar navbar-light bg-light justify-content-between navbar-expand-md\">\n                <Link className=\"navbar-brand\" to=\"/home\">Bowled Over</Link>\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavDropdown\" aria-controls=\"navbarNavDropdown\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"navbar-collapse collapse w-100 order-3 dual-collapse2\" id=\"navbarNavDropdown\">\n                    <ul className=\"navbar-nav ml-auto\">\n                        <li className=\"nav-item dropdown\">\n                            <a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdownMenuLink\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                                {`${this.props.firstName} ${this.props.lastName}`}\n                            </a>\n                            <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdownMenuLink\">\n                                <a className=\"dropdown-item\" href=\"/profile\">Profile</a>\n                                <a className=\"dropdown-item\" href=\"#\" onClick={this.logout}>Logout</a>\n                            </div>\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n        )\n    }\n}\n\nexport default NavBar","import React, { Component } from 'react'\nimport Jumbotron from './Jumbotron'\nimport './Profile.css'\n\nclass Profile extends Component {\n    state = {\n        firstName: '',\n        lastName: '',\n        email: '',\n        opponents: [],\n        balls: []\n    }\n\n    componentDidMount() {\n        this.getUserInfo()\n    }\n\n    getUserInfo() {\n        fetch('/api/user')\n            .then(res => {\n                if (!res.ok) throw res\n                return res.json()\n            })\n            .then(user => {\n                console.log('this user is ', user)\n                this.setState({\n                    firstName: user.firstName,\n                    lastName: user.lastName,\n                    email: user.email,\n                    opponents: user.commonOpponents,\n                    balls: user.balls\n                })\n            })\n    }\n\n    render() {\n        return (\n            <div className='container'>\n                <Jumbotron />\n                <div className=\"row\">\n                    <div className=\"col-md-8 offset-md-2\">\n                        <form>\n                            <div class=\"form-group row\">\n                                <label for=\"staticEmail\" class=\"col-sm-2 col-form-label\">First Name</label>\n                                <div class=\"col-sm-10\">\n                                    <input type=\"text\" readonly class=\"form-control-plaintext\" id=\"staticFirstName\" value={this.state.firstName} />\n                                </div>\n                            </div>\n                            <div class=\"form-group row\">\n                                <label for=\"staticEmail\" class=\"col-sm-2 col-form-label\">Last Name</label>\n                                <div class=\"col-sm-10\">\n                                    <input type=\"text\" readonly class=\"form-control-plaintext\" id=\"staticLastName\" value={this.state.lastName} />\n                                </div>\n                            </div>\n                            <div class=\"form-group row\">\n                                <label for=\"staticEmail\" class=\"col-sm-2 col-form-label\">Email</label>\n                                <div class=\"col-sm-10\">\n                                    <input type=\"text\" readonly class=\"form-control-plaintext\" id=\"staticEmail\" value={this.state.email} />\n                                </div>\n                            </div>\n                            <div class=\"form-group row\">\n                                <label for=\"staticEmail\" class=\"col-sm-2 col-form-label\">Opponents</label>\n                                <div class=\"col-sm-10\">\n                                    {this.state.opponents.map(opponent => {\n                                        return (\n                                            <input type=\"text\" readonly class=\"form-control-plaintext\" id=\"staticEmail\" value={opponent.name} />\n                                        )\n                                    })}\n\n                                </div>\n                            </div>\n                            <div class=\"form-group row\">\n                                <label for=\"staticEmail\" class=\"col-sm-2 col-form-label\">Balls</label>\n                                <div class=\"col-sm-10\">\n                                {this.state.balls.map(ball => {\n                                        return (\n                                            <input type=\"text\" readonly class=\"form-control-plaintext\" id=\"staticEmail\" value={ball.name} />\n                                        )\n                                    })}                                </div>\n                            </div>\n                        </form>\n\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default Profile\n","import React from 'react';\nimport Jumbotron from './Jumbotron'\n\nconst PostSignup = () => {\n    return (\n        <div className='container'>\n            <Jumbotron />\n            <div className='row'>\n                <div className='col-md-8 offset-md-2 signup'>\n                    <p>Thanks for signing up for Bowled Over!</p>\n                    <p>Please check your email for a verification link.</p>\n                </div>\n            </div>\n\n        </div>\n    )\n}\n\nexport default PostSignup","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\n\nimport './App.css';\nimport Home from './components/Home'\nimport Login from './components/Login'\nimport Signup from './components/Signup'\nimport Verified from './components/Verified'\nimport Session from './components/Session'\nimport Game from './components/Game'\nimport NavBar from './components/NavBar'\nimport Loading from './components/Loading'\nimport Profile from './components/Profile'\nimport PostSignup from './components/PostSignup'\n\nlet self = null\n\nclass App extends Component {\n  state = {\n    isAuthenticated: false,\n    user: null,\n    isCheckingAuth: true\n  }\n\n  constructor(props) {\n    super(props)\n    self = this\n    fetch('/api/user')\n      .then(res => {\n        if (res.status === 401) {\n          self.setState({ isAuthenticated: false, isCheckingAuth: false })\n          throw res\n        }\n        console.log('got the res', res)\n        return res.json()\n      })\n      .then(user => {\n        console.log('got the logged in user', user)\n        self.setState({\n          isAuthenticated: true,\n          isCheckingAuth: false,\n          user\n        })\n      })\n      .catch(err => {\n        console.error(err)\n      })\n  }\n\n  setGlobalUser(user) {\n    console.log('setting user', user)\n    self.setState({ user, isAuthenticated: true })\n  }\n\n  render() {\n    if (this.state.isCheckingAuth) {\n      return <Loading />\n    }\n    return (\n      <Router>\n        <div>\n          <Switch>\n            <Route path=\"/login\">\n              <Login setGlobalUser={this.setGlobalUser} />\n            </Route>\n            <Route path=\"/signup\">\n              <Signup />\n            </Route>\n            <Route path=\"/verified\">\n              <Verified />\n            </Route>\n            <Route path=\"/postsignup\">\n              <PostSignup />\n            </Route>\n            <PrivateRoute path=\"/profile\" user={this.state.user} component={Profile} isAuthenticated={this.state.isAuthenticated} />\n            <PrivateRoute path=\"/session/:sessionId/game/:gameId\" user={this.state.user} component={Game} isAuthenticated={this.state.isAuthenticated} />\n            <PrivateRoute path=\"/session/:sessionId\" user={this.state.user} component={Session} isAuthenticated={this.state.isAuthenticated} />\n            <PrivateRoute path=\"/\" user={this.state.user} component={Home} isAuthenticated={this.state.isAuthenticated} />\n          </Switch>\n        </div>\n      </Router>\n    )\n  }\n}\n\nconst PrivateRoute = ({ component: Component, isAuthenticated, user, ...rest }) => (\n  <Route {...rest} render={(props) => (\n    isAuthenticated === true\n      ? <div><NavBar firstName={user.firstName} lastName={user.lastName}></NavBar><Component {...props} /></div>\n      : <Redirect to='/login' />\n  )} />\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Signup from './components/Signup'\nimport Login from './components/Login'\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}